{"version":3,"file":"static/js/509.c58d8b25.chunk.js","mappings":"mQAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iWA4BzBC,EAAUJ,EAAAA,GAAAA,IAAUK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qIAUpBG,EAAeN,EAAAA,GAAAA,IAAUO,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+DAMzBK,EAASR,EAAAA,GAAAA,OAAaS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,oc,8EC5B7BO,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KAAaG,SAAS,sBAC5BC,OAAQJ,EAAAA,KAAaG,SAAS,gCAiFhC,EA9EoB,WAClB,IAAQE,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAiBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OACtCC,EAAAA,EAAAA,IAAqBD,EAAO,CAAEJ,GAAAA,GAAK,IAG/BM,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,CACpBb,KAAMK,EAAiBA,EAAeL,KAAO,GAC7CE,OAAQG,EAAiBA,EAAeH,OAAS,IAqBnD,OACEY,EAAAA,EAAAA,KAACvB,EAAO,CAAAwB,UACND,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLH,cAAeA,EACfI,iBAAkBpB,EAClBqB,SAvBe,SAAAC,GACnB,IAAMC,EAAiB,CAAEpB,KAAMmB,EAAOnB,KAAME,OAAQiB,EAAOjB,OAAQC,GAAAA,GAEnEQ,GAASU,EAAAA,EAAAA,IAAYD,IAErBX,GAAU,GAEVa,EAAAA,GAAAA,SACEC,EAAAA,EAAAA,MAAA,OAAAR,SAAA,CAAK,YACKD,EAAAA,EAAAA,KAAA,KAAAC,SAAII,EAAOnB,OAAS,eAE9B,CACEwB,SAAU,IACVC,KAAM,UAGZ,EAO6BV,UAEvBQ,EAAAA,EAAAA,MAACrC,EAAU,CAACwC,aAAa,MAAKX,SAAA,EAC5BQ,EAAAA,EAAAA,MAAC9B,EAAY,CAAAsB,SAAA,EACXD,EAAAA,EAAAA,KAACa,EAAAA,EAAiB,KAClBb,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,MAAM,OACN/B,KAAK,OACLgC,WAAS,EACTC,QAAQ,WACRC,UAAU,kBAGdpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAY,CAACnC,KAAK,OAAOoC,UAAU,OAAOC,MAAO,CAAEC,MAAO,UAE3Df,EAAAA,EAAAA,MAAC9B,EAAY,CAAAsB,SAAA,EACXD,EAAAA,EAAAA,KAACyB,EAAAA,EAAgB,KACjBzB,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJC,GAAIW,EAAAA,GACJC,YAAaX,EAAAA,EACb9B,KAAK,SACLiC,QAAQ,WACRS,OAAO,sBACPC,sBAAsB,EACtBC,KAAK,UAGT9B,EAAAA,EAAAA,KAACqB,EAAAA,GAAY,CACXnC,KAAK,SACLoC,UAAU,OACVC,MAAO,CAAEC,MAAO,UAGlBxB,EAAAA,EAAAA,KAACnB,EAAM,CAACkD,KAAK,SAAQ9B,SAAC,eAKhC,C","sources":["Pages/ContactEdit/ContactEdit.styled.js","Pages/ContactEdit/ContactEdit.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px;\n  align-items: center;\n\n  div {\n    width: 100%;\n  }\n\n  svg {\n    width: 28px;\n    height: 28px;\n  }\n\n  @media screen and (min-width: 767px) {\n    div > div {\n      width: 300px;\n    }\n\n    svg {\n      width: 36px;\n      height: 36px;\n    }\n  }\n`;\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  font-weight: 500;\n  padding: 10px;\n\n  @media screen and (min-width: 767px) {\n    width: 500px;\n  }\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  align-items: end;\n  gap: 10px;\n`;\n\nexport const Button = styled.button`\n  padding: 12px;\n  align-self: flex-start;\n  margin-left: 55px;\n  margin-top: 15px;\n  min-width: 105px;\n  background-color: rgb(102, 102, 102);\n  color: #fff;\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transition: box-shadow 250ms ease-in-out;\n\n  &:hover {\n    box-shadow: -1px 0px 8px -2px rgba(0, 0, 0, 0.75);\n  }\n\n  &:active {\n    box-shadow: -1px 0px 8px -2px rgba(0, 0, 0, 0.75);\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { selectCurrentContact } from 'redux/selectors';\nimport {\n  StyledForm,\n  Wrapper,\n  Button,\n  InputWrapper,\n} from './ContactEdit.styled';\nimport { ErrorMessage, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { PatternFormat } from 'react-number-format';\nimport { TextField } from '@mui/material';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport PhoneEnabledIcon from '@mui/icons-material/PhoneEnabled';\nimport toast from 'react-hot-toast';\nimport { editContact } from 'redux/thunk';\n\nconst ContactsSchema = Yup.object().shape({\n  name: Yup.string().required('* Name is required'),\n  number: Yup.string().required('* Phone number is required'),\n});\n\nconst ContactEdit = () => {\n  const { id } = useParams();\n  const currentContact = useSelector(state =>\n    selectCurrentContact(state, { id })\n  );\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: currentContact ? currentContact.name : '',\n    number: currentContact ? currentContact.number : '',\n  };\n\n  const handleSubmit = values => {\n    const updatedContact = { name: values.name, number: values.number, id };\n\n    dispatch(editContact(updatedContact));\n\n    navigate(-1);\n\n    toast.success(\n      <div>\n        Contact <b>{values.name}</b> updated!\n      </div>,\n      {\n        duration: 4000,\n        icon: 'âœ…',\n      }\n    );\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={ContactsSchema}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm autoComplete=\"off\">\n          <InputWrapper>\n            <PersonOutlineIcon />\n            <Field\n              as={TextField}\n              label=\"Name\"\n              name=\"name\"\n              multiline\n              variant=\"standard\"\n              className=\"fieldName\"\n            />\n          </InputWrapper>\n          <ErrorMessage name=\"name\" component=\"span\" style={{ color: 'red' }} />\n\n          <InputWrapper>\n            <PhoneEnabledIcon />\n            <Field\n              as={PatternFormat}\n              customInput={TextField}\n              name=\"number\"\n              variant=\"standard\"\n              format=\"+38 (0##) ### ## ##\"\n              allowEmptyFormatting={true}\n              mask=\"_\"\n            />\n          </InputWrapper>\n          <ErrorMessage\n            name=\"number\"\n            component=\"span\"\n            style={{ color: 'red' }}\n          />\n\n          <Button type=\"submit\">Edit</Button>\n        </StyledForm>\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default ContactEdit;\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","InputWrapper","_templateObject3","Button","_templateObject4","ContactsSchema","Yup","shape","name","required","number","id","useParams","currentContact","useSelector","state","selectCurrentContact","navigate","useNavigate","dispatch","useDispatch","initialValues","_jsx","children","Formik","validationSchema","onSubmit","values","updatedContact","editContact","toast","_jsxs","duration","icon","autoComplete","PersonOutlineIcon","Field","as","TextField","label","multiline","variant","className","ErrorMessage","component","style","color","PhoneEnabledIcon","PatternFormat","customInput","format","allowEmptyFormatting","mask","type"],"sourceRoot":""}